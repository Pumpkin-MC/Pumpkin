name: Cargo Build, Test, and Linting

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  format:
    name: Check formatting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v5
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --check

  clippy:
    name: Run lints
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v5
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --all-targets --all-features

  build_and_test:
    name: Build project and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v5
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo test --verbose

  build_release:
    name: Build project in release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v5
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo build --verbose --release
      - name: Export executable
        uses: actions/upload-artifact@v4
        with:
          name: pumpkin-${{ matrix.os }}
          compression-level: 9
          path: target/release/pumpkin*
  clippy_release:
    name: Run lints in release mode
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - stable
    steps:
      - uses: actions/checkout@v5
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --release --all-targets --all-features
  release_on_push:
    name: Create & Upload Release
    runs-on: ubuntu-latest
    # This job only runs after all `build_release` jobs have completed successfully
    needs: [build_release]
    # This job only runs on a successful push to the master branch
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
    env:
      NIGHTLY_REPO: ${{ github.repository_owner }}/pumpkin-commit-builds
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v5
        # Creates a draft release for the current commit
      - name: Create Draft GitHub Release
        id: create-release
        run: |
          RELEASE_TAG="per-commit-${{ github.sha }}"
          RELEASE_TITLE="Build ${{ github.sha }}"
          
          # Using gh CLI to create a new draft release
          RELEASE_URL=$(gh release create "${RELEASE_TAG}" \
            --draft \
            --title "${RELEASE_TITLE}" \
            --notes 'Per-commit build based on ${{ github.repository }}@${{ github.sha }}' \
            --repo ${{ env.NIGHTLY_REPO }})

          # Extract the release ID from the API response
          TEMP_TAG=$(basename "$RELEASE_URL")
          RELEASE_ID=$( \
            gh api -H "Accept: application/vnd.github+json" \
            "/repos/${NIGHTLY_REPO}/releases/tags/${TEMP_TAG}" \
            | jq '.id' \
          )
          
          echo "Release ID obtained: ${RELEASE_ID}"
          echo "release-id=${RELEASE_ID}" >> ${GITHUB_OUTPUT}
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_REPO_TOKEN }}

      - name: Download all executables
        uses: actions/download-artifact@v5
        with:
          path: pumpkin
          pattern: pumpkin-*
          merge-multiple: true

      # Upload the artifacts from the downloaded directory
      - name: Upload Linux executable to release
        run: |
          gh release upload ${{ steps.create-release.outputs.release-id }} pumpkin/pumpkin-ubuntu-latest --repo ${{ env.NIGHTLY_REPO }}
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_REPO_TOKEN }}

      - name: Upload Windows executable to release
        run: |
          gh release upload ${{ steps.create-release.outputs.release-id }} pumpkin/pumpkin-windows-latest.exe --repo ${{ env.NIGHTLY_REPO }}
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_REPO_TOKEN }}

      - name: Upload macOS executable to release
        run: |
          gh release upload ${{ steps.create-release.outputs.release-id }} pumpkin/pumpkin-macos-latest --repo ${{ env.NIGHTLY_REPO }}
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_REPO_TOKEN }}

      # Publish the release
      - name: Publish as latest
        run: |
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            "/repos/${NIGHTLY_REPO}/releases/${RELEASE_ID}" \
            -F draft=false -F prerelease=true
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_REPO_TOKEN }}
          RELEASE_ID: ${{ steps.create-release.outputs.release-id }}
